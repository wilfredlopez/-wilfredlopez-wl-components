{"version":3,"file":"ViewTransitionManager.js","sourceRoot":"","sources":["../../src/ReactRouter/ViewTransitionManager.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,yBAAyB,EACzB,kBAAkB,GACnB,MAAM,qBAAqB,CAAC;AAC7B,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAW5D;;GAEG;AACH,MAAM,OAAO,qBAAsB,SAAQ,KAAK,CAAC,SAGhD;IAKC,YAAY,KAAiC;QAC3C,KAAK,CAAC,KAAK,CAAC,CAAC;QALf,uBAAkB,GAAG,IAAI,yBAAyB,EAAE,CAAC;QACrD,eAAU,GAAG,KAAK,CAAC;QAKjB,IAAI,CAAC,KAAK,GAAG;YACX,IAAI,EAAE,IAAI;SACX,CAAC;QAEF,IAAI,CAAC,kBAAkB,CAAC,yBAAyB,CAAC,GAAG,EAAE;YACrD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;gBACrB,IAAI,IAAI,CAAC,UAAU,EAAE;oBACnB,IAAI,CAAC,QAAQ,CACX;wBACE,IAAI,EAAE,KAAK;qBACZ,EACD,GAAG,EAAE;wBACH,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;oBACvC,CAAC,CACF,CAAC;iBACH;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACzB,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC1B,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5B,OAAO,CACL,oBAAC,kBAAkB,CAAC,QAAQ,IAAC,KAAK,EAAE,IAAI,CAAC,kBAAkB,IACxD,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CACA,CAC/B,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,WAAW;QACpB,OAAO,mBAAmB,CAAC;IAC7B,CAAC;CACF","sourcesContent":["import {\n  DefaultWlLifeCycleContext,\n  WlLifeCycleContext,\n} from '@wilfredlopez/react';\nimport React from 'react';\n\nimport { RouteManagerContext } from './RouteManagerContext';\n\ninterface ViewTransitionManagerProps {\n  id: string;\n  mount: boolean;\n}\n\ninterface ViewTransitionManagerState {\n  show: boolean;\n}\n\n/**\n * Manages the View's DOM lifetime by keeping it around long enough to complete page transitions before removing it.\n */\nexport class ViewTransitionManager extends React.Component<\n  ViewTransitionManagerProps,\n  ViewTransitionManagerState\n> {\n  WlLifeCycleContext = new DefaultWlLifeCycleContext();\n  _isMounted = false;\n  context!: React.ContextType<typeof RouteManagerContext>;\n\n  constructor(props: ViewTransitionManagerProps) {\n    super(props);\n    this.state = {\n      show: true,\n    };\n\n    this.WlLifeCycleContext.onComponentCanBeDestroyed(() => {\n      if (!this.props.mount) {\n        if (this._isMounted) {\n          this.setState(\n            {\n              show: false,\n            },\n            () => {\n              this.context.hideView(this.props.id);\n            }\n          );\n        }\n      }\n    });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const { show } = this.state;\n    return (\n      <WlLifeCycleContext.Provider value={this.WlLifeCycleContext}>\n        {show && this.props.children}\n      </WlLifeCycleContext.Provider>\n    );\n  }\n\n  static get contextType() {\n    return RouteManagerContext;\n  }\n}\n"]}