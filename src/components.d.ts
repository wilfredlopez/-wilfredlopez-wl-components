/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Color, } from "./interfaces/Color.model";
import { AlignmentModifier, JustificationModifier, WrapType, } from "./interfaces/FlexClassModifiers.model";
import { TextClassModifier, } from "./interfaces/TextClassModifier.model";
import { Variants, } from "./interfaces/Variants.model";
import { Breakpoints, } from "./interfaces/Breakpoints.model";
import { Placement, } from "./components/wl-drawer/wl-drawer";
import { InputChangeEventDetail, StyleEventDetail, TextFieldTypes, } from "./interfaces/Inputs.model";
import { SpinerVariant, } from "./interfaces/SpinerVariant.mode";
export namespace Components {
    interface WlAppbar {
        "align"?: AlignmentModifier;
        "color"?: Color;
        "justify"?: JustificationModifier;
        "noPadding"?: boolean;
        "textAlign"?: TextClassModifier;
    }
    interface WlButton {
        "circular": boolean;
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean;
        "href"?: string;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string;
        "size"?: "sm" | "lg" | "xl";
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string;
        /**
          * The type of the button.
         */
        "type": "submit" | "reset" | "button";
        "variant": Variants;
    }
    interface WlCard {
    }
    interface WlCol {
        /**
          * The amount to offset the column, in terms of how many columns it should shift to the end of the total available.
         */
        "offset"?: string;
        /**
          * The amount to offset the column for lg screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetLg"?: string;
        /**
          * The amount to offset the column for md screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetMd"?: string;
        /**
          * The amount to offset the column for sm screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetSm"?: string;
        /**
          * The amount to offset the column for xl screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetXl"?: string;
        /**
          * The amount to offset the column for xs screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetXs"?: string;
        /**
          * The amount to pull the column, in terms of how many columns it should shift to the start of the total available.
         */
        "pull"?: string;
        /**
          * The amount to pull the column for lg screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullLg"?: string;
        /**
          * The amount to pull the column for md screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullMd"?: string;
        /**
          * The amount to pull the column for sm screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullSm"?: string;
        /**
          * The amount to pull the column for xl screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullXl"?: string;
        /**
          * The amount to pull the column for xs screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullXs"?: string;
        /**
          * The amount to push the column, in terms of how many columns it should shift to the end of the total available.
         */
        "push"?: string;
        /**
          * The amount to push the column for lg screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushLg"?: string;
        /**
          * The amount to push the column for md screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushMd"?: string;
        /**
          * The amount to push the column for sm screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushSm"?: string;
        /**
          * The amount to push the column for xl screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushXl"?: string;
        /**
          * The amount to push the column for xs screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushXs"?: string;
        /**
          * The size of the column, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "size"?: string;
        /**
          * The size of the column for lg screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeLg"?: string;
        /**
          * The size of the column for md screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeMd"?: string;
        /**
          * The size of the column for sm screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeSm"?: string;
        /**
          * The size of the column for xl screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeXl"?: string;
        /**
          * The size of the column for xs screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeXs"?: string;
    }
    interface WlContainer {
        "class": string;
        "fluid": boolean;
        "maxWidth": Breakpoints;
        "size": Breakpoints;
    }
    interface WlDrawer {
        "close": () => Promise<void>;
        "color"?: Color;
        "isOpen": boolean;
        "open": () => Promise<void>;
        "placement": Placement;
    }
    interface WlDrawerBody {
    }
    interface WlDrawerCloseButton {
        "close": () => Promise<void>;
        "color"?: Color;
        "variant"?: Variants;
    }
    interface WlDrawerContent {
    }
    interface WlDrawerFooter {
        "fixed": boolean;
    }
    interface WlDrawerHeader {
        "color"?: Color;
    }
    interface WlDrawerMenuButton {
        "color"?: Color;
        "size"?: "sm" | "lg" | "xl";
        "variant"?: Variants;
    }
    interface WlFlex {
        "align"?: AlignmentModifier;
        "justify"?: JustificationModifier;
        /**
          * The amount to offset the column, in terms of how many columns it should shift to the end of the total available.
         */
        "offset"?: string;
        /**
          * The amount to offset the column for lg screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetLg"?: string;
        /**
          * The amount to offset the column for md screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetMd"?: string;
        /**
          * The amount to offset the column for sm screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetSm"?: string;
        /**
          * The amount to offset the column for xl screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetXl"?: string;
        /**
          * The amount to offset the column for xs screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetXs"?: string;
        /**
          * The amount to pull the column, in terms of how many columns it should shift to the start of the total available.
         */
        "pull"?: string;
        /**
          * The amount to pull the column for lg screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullLg"?: string;
        /**
          * The amount to pull the column for md screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullMd"?: string;
        /**
          * The amount to pull the column for sm screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullSm"?: string;
        /**
          * The amount to pull the column for xl screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullXl"?: string;
        /**
          * The amount to pull the column for xs screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullXs"?: string;
        /**
          * The amount to push the column, in terms of how many columns it should shift to the end of the total available.
         */
        "push"?: string;
        /**
          * The amount to push the column for lg screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushLg"?: string;
        /**
          * The amount to push the column for md screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushMd"?: string;
        /**
          * The amount to push the column for sm screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushSm"?: string;
        /**
          * The amount to push the column for xl screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushXl"?: string;
        /**
          * The amount to push the column for xs screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushXs"?: string;
        /**
          * The size of the column, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "size"?: string;
        /**
          * The size of the column for lg screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeLg"?: string;
        /**
          * The size of the column for md screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeMd"?: string;
        /**
          * The size of the column for sm screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeSm"?: string;
        /**
          * The size of the column for xl screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeXl"?: string;
        /**
          * The size of the column for xs screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeXs"?: string;
        "wrap"?: WrapType;
    }
    interface WlGrid {
        /**
          * If `true`, the grid will have a fixed width based on the screen size.
         */
        "fixed": boolean;
    }
    interface WlInput {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize": string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete": "on" | "off";
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect": "on" | "off";
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearInput": boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke.
         */
        "debounce": number;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send";
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search";
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets focus on the specified `wl-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "size"?: number;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is text.
         */
        "type": TextFieldTypes;
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface WlItem {
        /**
          * If `true`, a button tag will be rendered and the item will be tappable.
         */
        "button": boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the item.
         */
        "disabled": boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download": string | undefined;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string | undefined;
        /**
          * How the bottom border should be displayed on the item.
         */
        "lines"?: "full" | "inset" | "none";
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel": string | undefined;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * The type of the button. Only used when an `onclick` or `button` property is present.
         */
        "type": "submit" | "reset" | "button";
    }
    interface WlLabel {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * The position determines where and how the label behaves inside an item.
         */
        "position"?: "fixed" | "stacked" | "floating";
    }
    interface WlModal {
        "close": () => Promise<void>;
        "open": () => Promise<void>;
        "show": boolean;
    }
    interface WlRow {
        "align": "center" | "end" | "start" | "baseline";
    }
    interface WlSpinner {
        "color"?: Color;
        /**
          * @size defaults to 80px
         */
        "size"?: string;
        "variant": SpinerVariant;
    }
    interface WlText {
        "color"?: Color;
    }
}
declare global {
    interface HTMLWlAppbarElement extends Components.WlAppbar, HTMLStencilElement {
    }
    var HTMLWlAppbarElement: {
        prototype: HTMLWlAppbarElement;
        new (): HTMLWlAppbarElement;
    };
    interface HTMLWlButtonElement extends Components.WlButton, HTMLStencilElement {
    }
    var HTMLWlButtonElement: {
        prototype: HTMLWlButtonElement;
        new (): HTMLWlButtonElement;
    };
    interface HTMLWlCardElement extends Components.WlCard, HTMLStencilElement {
    }
    var HTMLWlCardElement: {
        prototype: HTMLWlCardElement;
        new (): HTMLWlCardElement;
    };
    interface HTMLWlColElement extends Components.WlCol, HTMLStencilElement {
    }
    var HTMLWlColElement: {
        prototype: HTMLWlColElement;
        new (): HTMLWlColElement;
    };
    interface HTMLWlContainerElement extends Components.WlContainer, HTMLStencilElement {
    }
    var HTMLWlContainerElement: {
        prototype: HTMLWlContainerElement;
        new (): HTMLWlContainerElement;
    };
    interface HTMLWlDrawerElement extends Components.WlDrawer, HTMLStencilElement {
    }
    var HTMLWlDrawerElement: {
        prototype: HTMLWlDrawerElement;
        new (): HTMLWlDrawerElement;
    };
    interface HTMLWlDrawerBodyElement extends Components.WlDrawerBody, HTMLStencilElement {
    }
    var HTMLWlDrawerBodyElement: {
        prototype: HTMLWlDrawerBodyElement;
        new (): HTMLWlDrawerBodyElement;
    };
    interface HTMLWlDrawerCloseButtonElement extends Components.WlDrawerCloseButton, HTMLStencilElement {
    }
    var HTMLWlDrawerCloseButtonElement: {
        prototype: HTMLWlDrawerCloseButtonElement;
        new (): HTMLWlDrawerCloseButtonElement;
    };
    interface HTMLWlDrawerContentElement extends Components.WlDrawerContent, HTMLStencilElement {
    }
    var HTMLWlDrawerContentElement: {
        prototype: HTMLWlDrawerContentElement;
        new (): HTMLWlDrawerContentElement;
    };
    interface HTMLWlDrawerFooterElement extends Components.WlDrawerFooter, HTMLStencilElement {
    }
    var HTMLWlDrawerFooterElement: {
        prototype: HTMLWlDrawerFooterElement;
        new (): HTMLWlDrawerFooterElement;
    };
    interface HTMLWlDrawerHeaderElement extends Components.WlDrawerHeader, HTMLStencilElement {
    }
    var HTMLWlDrawerHeaderElement: {
        prototype: HTMLWlDrawerHeaderElement;
        new (): HTMLWlDrawerHeaderElement;
    };
    interface HTMLWlDrawerMenuButtonElement extends Components.WlDrawerMenuButton, HTMLStencilElement {
    }
    var HTMLWlDrawerMenuButtonElement: {
        prototype: HTMLWlDrawerMenuButtonElement;
        new (): HTMLWlDrawerMenuButtonElement;
    };
    interface HTMLWlFlexElement extends Components.WlFlex, HTMLStencilElement {
    }
    var HTMLWlFlexElement: {
        prototype: HTMLWlFlexElement;
        new (): HTMLWlFlexElement;
    };
    interface HTMLWlGridElement extends Components.WlGrid, HTMLStencilElement {
    }
    var HTMLWlGridElement: {
        prototype: HTMLWlGridElement;
        new (): HTMLWlGridElement;
    };
    interface HTMLWlInputElement extends Components.WlInput, HTMLStencilElement {
    }
    var HTMLWlInputElement: {
        prototype: HTMLWlInputElement;
        new (): HTMLWlInputElement;
    };
    interface HTMLWlItemElement extends Components.WlItem, HTMLStencilElement {
    }
    var HTMLWlItemElement: {
        prototype: HTMLWlItemElement;
        new (): HTMLWlItemElement;
    };
    interface HTMLWlLabelElement extends Components.WlLabel, HTMLStencilElement {
    }
    var HTMLWlLabelElement: {
        prototype: HTMLWlLabelElement;
        new (): HTMLWlLabelElement;
    };
    interface HTMLWlModalElement extends Components.WlModal, HTMLStencilElement {
    }
    var HTMLWlModalElement: {
        prototype: HTMLWlModalElement;
        new (): HTMLWlModalElement;
    };
    interface HTMLWlRowElement extends Components.WlRow, HTMLStencilElement {
    }
    var HTMLWlRowElement: {
        prototype: HTMLWlRowElement;
        new (): HTMLWlRowElement;
    };
    interface HTMLWlSpinnerElement extends Components.WlSpinner, HTMLStencilElement {
    }
    var HTMLWlSpinnerElement: {
        prototype: HTMLWlSpinnerElement;
        new (): HTMLWlSpinnerElement;
    };
    interface HTMLWlTextElement extends Components.WlText, HTMLStencilElement {
    }
    var HTMLWlTextElement: {
        prototype: HTMLWlTextElement;
        new (): HTMLWlTextElement;
    };
    interface HTMLElementTagNameMap {
        "wl-appbar": HTMLWlAppbarElement;
        "wl-button": HTMLWlButtonElement;
        "wl-card": HTMLWlCardElement;
        "wl-col": HTMLWlColElement;
        "wl-container": HTMLWlContainerElement;
        "wl-drawer": HTMLWlDrawerElement;
        "wl-drawer-body": HTMLWlDrawerBodyElement;
        "wl-drawer-close-button": HTMLWlDrawerCloseButtonElement;
        "wl-drawer-content": HTMLWlDrawerContentElement;
        "wl-drawer-footer": HTMLWlDrawerFooterElement;
        "wl-drawer-header": HTMLWlDrawerHeaderElement;
        "wl-drawer-menu-button": HTMLWlDrawerMenuButtonElement;
        "wl-flex": HTMLWlFlexElement;
        "wl-grid": HTMLWlGridElement;
        "wl-input": HTMLWlInputElement;
        "wl-item": HTMLWlItemElement;
        "wl-label": HTMLWlLabelElement;
        "wl-modal": HTMLWlModalElement;
        "wl-row": HTMLWlRowElement;
        "wl-spinner": HTMLWlSpinnerElement;
        "wl-text": HTMLWlTextElement;
    }
}
declare namespace LocalJSX {
    interface WlAppbar {
        "align"?: AlignmentModifier;
        "color"?: Color;
        "justify"?: JustificationModifier;
        "noPadding"?: boolean;
        "textAlign"?: TextClassModifier;
    }
    interface WlButton {
        "circular"?: boolean;
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean;
        "href"?: string;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string;
        "size"?: "sm" | "lg" | "xl";
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string;
        /**
          * The type of the button.
         */
        "type"?: "submit" | "reset" | "button";
        "variant"?: Variants;
    }
    interface WlCard {
    }
    interface WlCol {
        /**
          * The amount to offset the column, in terms of how many columns it should shift to the end of the total available.
         */
        "offset"?: string;
        /**
          * The amount to offset the column for lg screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetLg"?: string;
        /**
          * The amount to offset the column for md screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetMd"?: string;
        /**
          * The amount to offset the column for sm screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetSm"?: string;
        /**
          * The amount to offset the column for xl screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetXl"?: string;
        /**
          * The amount to offset the column for xs screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetXs"?: string;
        /**
          * The amount to pull the column, in terms of how many columns it should shift to the start of the total available.
         */
        "pull"?: string;
        /**
          * The amount to pull the column for lg screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullLg"?: string;
        /**
          * The amount to pull the column for md screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullMd"?: string;
        /**
          * The amount to pull the column for sm screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullSm"?: string;
        /**
          * The amount to pull the column for xl screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullXl"?: string;
        /**
          * The amount to pull the column for xs screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullXs"?: string;
        /**
          * The amount to push the column, in terms of how many columns it should shift to the end of the total available.
         */
        "push"?: string;
        /**
          * The amount to push the column for lg screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushLg"?: string;
        /**
          * The amount to push the column for md screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushMd"?: string;
        /**
          * The amount to push the column for sm screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushSm"?: string;
        /**
          * The amount to push the column for xl screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushXl"?: string;
        /**
          * The amount to push the column for xs screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushXs"?: string;
        /**
          * The size of the column, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "size"?: string;
        /**
          * The size of the column for lg screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeLg"?: string;
        /**
          * The size of the column for md screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeMd"?: string;
        /**
          * The size of the column for sm screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeSm"?: string;
        /**
          * The size of the column for xl screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeXl"?: string;
        /**
          * The size of the column for xs screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeXs"?: string;
    }
    interface WlContainer {
        "class"?: string;
        "fluid"?: boolean;
        "maxWidth"?: Breakpoints;
        "size"?: Breakpoints;
    }
    interface WlDrawer {
        "color"?: Color;
        "isOpen"?: boolean;
        "onDrawerOpenStateChange"?: (event: CustomEvent<{
            isOpen: boolean;
        }>) => void;
        "placement"?: Placement;
    }
    interface WlDrawerBody {
    }
    interface WlDrawerCloseButton {
        "color"?: Color;
        "variant"?: Variants;
    }
    interface WlDrawerContent {
    }
    interface WlDrawerFooter {
        "fixed"?: boolean;
    }
    interface WlDrawerHeader {
        "color"?: Color;
    }
    interface WlDrawerMenuButton {
        "color"?: Color;
        "size"?: "sm" | "lg" | "xl";
        "variant"?: Variants;
    }
    interface WlFlex {
        "align"?: AlignmentModifier;
        "justify"?: JustificationModifier;
        /**
          * The amount to offset the column, in terms of how many columns it should shift to the end of the total available.
         */
        "offset"?: string;
        /**
          * The amount to offset the column for lg screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetLg"?: string;
        /**
          * The amount to offset the column for md screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetMd"?: string;
        /**
          * The amount to offset the column for sm screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetSm"?: string;
        /**
          * The amount to offset the column for xl screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetXl"?: string;
        /**
          * The amount to offset the column for xs screens, in terms of how many columns it should shift to the end of the total available.
         */
        "offsetXs"?: string;
        /**
          * The amount to pull the column, in terms of how many columns it should shift to the start of the total available.
         */
        "pull"?: string;
        /**
          * The amount to pull the column for lg screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullLg"?: string;
        /**
          * The amount to pull the column for md screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullMd"?: string;
        /**
          * The amount to pull the column for sm screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullSm"?: string;
        /**
          * The amount to pull the column for xl screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullXl"?: string;
        /**
          * The amount to pull the column for xs screens, in terms of how many columns it should shift to the start of the total available.
         */
        "pullXs"?: string;
        /**
          * The amount to push the column, in terms of how many columns it should shift to the end of the total available.
         */
        "push"?: string;
        /**
          * The amount to push the column for lg screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushLg"?: string;
        /**
          * The amount to push the column for md screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushMd"?: string;
        /**
          * The amount to push the column for sm screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushSm"?: string;
        /**
          * The amount to push the column for xl screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushXl"?: string;
        /**
          * The amount to push the column for xs screens, in terms of how many columns it should shift to the end of the total available.
         */
        "pushXs"?: string;
        /**
          * The size of the column, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "size"?: string;
        /**
          * The size of the column for lg screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeLg"?: string;
        /**
          * The size of the column for md screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeMd"?: string;
        /**
          * The size of the column for sm screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeSm"?: string;
        /**
          * The size of the column for xl screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeXl"?: string;
        /**
          * The size of the column for xs screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
         */
        "sizeXs"?: string;
        "wrap"?: WrapType;
    }
    interface WlGrid {
        /**
          * If `true`, the grid will have a fixed width based on the screen size.
         */
        "fixed"?: boolean;
    }
    interface WlInput {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize"?: string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: "on" | "off";
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect"?: "on" | "off";
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearInput"?: boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke.
         */
        "debounce"?: number;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send";
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search";
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onIonBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onIonChange"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onIonFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onIonInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "size"?: number;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is text.
         */
        "type"?: TextFieldTypes;
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface WlItem {
        /**
          * If `true`, a button tag will be rendered and the item will be tappable.
         */
        "button"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the item.
         */
        "disabled"?: boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download"?: string | undefined;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        /**
          * How the bottom border should be displayed on the item.
         */
        "lines"?: "full" | "inset" | "none";
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string | undefined;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * The type of the button. Only used when an `onclick` or `button` property is present.
         */
        "type"?: "submit" | "reset" | "button";
    }
    interface WlLabel {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * The position determines where and how the label behaves inside an item.
         */
        "position"?: "fixed" | "stacked" | "floating";
    }
    interface WlModal {
        "show"?: boolean;
    }
    interface WlRow {
        "align"?: "center" | "end" | "start" | "baseline";
    }
    interface WlSpinner {
        "color"?: Color;
        /**
          * @size defaults to 80px
         */
        "size"?: string;
        "variant"?: SpinerVariant;
    }
    interface WlText {
        "color"?: Color;
    }
    interface IntrinsicElements {
        "wl-appbar": WlAppbar;
        "wl-button": WlButton;
        "wl-card": WlCard;
        "wl-col": WlCol;
        "wl-container": WlContainer;
        "wl-drawer": WlDrawer;
        "wl-drawer-body": WlDrawerBody;
        "wl-drawer-close-button": WlDrawerCloseButton;
        "wl-drawer-content": WlDrawerContent;
        "wl-drawer-footer": WlDrawerFooter;
        "wl-drawer-header": WlDrawerHeader;
        "wl-drawer-menu-button": WlDrawerMenuButton;
        "wl-flex": WlFlex;
        "wl-grid": WlGrid;
        "wl-input": WlInput;
        "wl-item": WlItem;
        "wl-label": WlLabel;
        "wl-modal": WlModal;
        "wl-row": WlRow;
        "wl-spinner": WlSpinner;
        "wl-text": WlText;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "wl-appbar": LocalJSX.WlAppbar & JSXBase.HTMLAttributes<HTMLWlAppbarElement>;
            "wl-button": LocalJSX.WlButton & JSXBase.HTMLAttributes<HTMLWlButtonElement>;
            "wl-card": LocalJSX.WlCard & JSXBase.HTMLAttributes<HTMLWlCardElement>;
            "wl-col": LocalJSX.WlCol & JSXBase.HTMLAttributes<HTMLWlColElement>;
            "wl-container": LocalJSX.WlContainer & JSXBase.HTMLAttributes<HTMLWlContainerElement>;
            "wl-drawer": LocalJSX.WlDrawer & JSXBase.HTMLAttributes<HTMLWlDrawerElement>;
            "wl-drawer-body": LocalJSX.WlDrawerBody & JSXBase.HTMLAttributes<HTMLWlDrawerBodyElement>;
            "wl-drawer-close-button": LocalJSX.WlDrawerCloseButton & JSXBase.HTMLAttributes<HTMLWlDrawerCloseButtonElement>;
            "wl-drawer-content": LocalJSX.WlDrawerContent & JSXBase.HTMLAttributes<HTMLWlDrawerContentElement>;
            "wl-drawer-footer": LocalJSX.WlDrawerFooter & JSXBase.HTMLAttributes<HTMLWlDrawerFooterElement>;
            "wl-drawer-header": LocalJSX.WlDrawerHeader & JSXBase.HTMLAttributes<HTMLWlDrawerHeaderElement>;
            "wl-drawer-menu-button": LocalJSX.WlDrawerMenuButton & JSXBase.HTMLAttributes<HTMLWlDrawerMenuButtonElement>;
            "wl-flex": LocalJSX.WlFlex & JSXBase.HTMLAttributes<HTMLWlFlexElement>;
            "wl-grid": LocalJSX.WlGrid & JSXBase.HTMLAttributes<HTMLWlGridElement>;
            "wl-input": LocalJSX.WlInput & JSXBase.HTMLAttributes<HTMLWlInputElement>;
            "wl-item": LocalJSX.WlItem & JSXBase.HTMLAttributes<HTMLWlItemElement>;
            "wl-label": LocalJSX.WlLabel & JSXBase.HTMLAttributes<HTMLWlLabelElement>;
            "wl-modal": LocalJSX.WlModal & JSXBase.HTMLAttributes<HTMLWlModalElement>;
            "wl-row": LocalJSX.WlRow & JSXBase.HTMLAttributes<HTMLWlRowElement>;
            "wl-spinner": LocalJSX.WlSpinner & JSXBase.HTMLAttributes<HTMLWlSpinnerElement>;
            "wl-text": LocalJSX.WlText & JSXBase.HTMLAttributes<HTMLWlTextElement>;
        }
    }
}
