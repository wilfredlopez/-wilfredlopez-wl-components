@import "../themes/wl.functions.colors.scss";

//  Theme
// -------------------------------------------------------------------------------------------
// This file contains the theme variables shared
// between modes. This should only include variables
// used to theme the application colors.

// Default  Colors
// -------------------------------------------------------------------------------------------
// Color map should provide
// - base: main color to be used.
// - contrast: Color that will provide readable text against the base color
// - shade: 12% darker version of the base color (mix with black)
// - tint: 10% lighter version of the base color (mix with white)

$primary: #3880ff !default;
$secondary: #3dc2ff !default;
$tertiary: #5260ff !default;
$success: #2dd36f !default;
$warning: #ffc409 !default;
$danger: #eb445a !default;
$light: #f4f5f8 !default;
$medium: #92949c !default;
$dark: #222428 !default;

$colors: (
  primary: (
    base: $primary,
    contrast: #fff,
    shade: get-color-shade($primary),
    tint: get-color-tint($primary),
  ),
  secondary: (
    base: $secondary,
    contrast: #fff,
    shade: get-color-shade($secondary),
    tint: get-color-tint($secondary),
  ),
  tertiary: (
    base: $tertiary,
    contrast: #fff,
    shade: get-color-shade($tertiary),
    tint: get-color-tint($tertiary),
  ),
  success: (
    base: $success,
    contrast: #fff,
    shade: get-color-shade($success),
    tint: get-color-tint($success),
  ),
  warning: (
    base: $warning,
    contrast: #000,
    shade: get-color-shade($warning),
    tint: get-color-tint($warning),
  ),
  danger: (
    base: $danger,
    contrast: #fff,
    shade: get-color-shade($danger),
    tint: get-color-tint($danger),
  ),
  light: (
    base: $light,
    contrast: #000,
    shade: get-color-shade($light),
    tint: get-color-tint($light),
  ),
  medium: (
    base: $medium,
    contrast: #fff,
    shade: get-color-shade($medium),
    tint: get-color-tint($medium),
  ),
  dark: (
    base: $dark,
    contrast: #fff,
    shade: get-color-shade($dark),
    tint: get-color-tint($dark),
  ),
) !default;

@mixin generate-color($color-name) {
  $value: map-get($colors, $color-name);

  $base: map-get($value, base);
  $contrast: map-get($value, contrast);
  $shade: map-get($value, shade);
  $tint: map-get($value, tint);

  --wl-color-base: var(--wl-color-#{$color-name}, #{$base}) !important;
  --wl-color-base-rgb: var(
    --wl-color-#{$color-name}-rgb,
    #{color-to-rgb-list($base)}
  ) !important;
  --wl-color-contrast: var(
    --wl-color-#{$color-name}-contrast,
    #{$contrast}
  ) !important;
  --wl-color-contrast-rgb: var(
    --wl-color-#{$color-name}-contrast-rgb,
    #{color-to-rgb-list($contrast)}
  ) !important;
  --wl-color-shade: var(--wl-color-#{$color-name}-shade, #{$shade}) !important;
  --wl-color-tint: var(--wl-color-#{$color-name}-tint, #{$tint}) !important;
}

@each $color-name, $value in $colors {
  .wl-color-#{$color-name} {
    @include generate-color($color-name);
  }
  :root {
    --wl-color-#{$color-name} {
      @include generate-color($color-name);
    }
  }
}
