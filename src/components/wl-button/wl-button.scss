@import "../../themes/wl.globals";

// Button
// --------------------------------------------------

/// @prop - Padding top of the round button
$button-round-padding-top: 0 !default;

/// @prop - Padding end of the round button
$button-round-padding-end: 26px !default;

/// @prop - Padding bottom of the round button
$button-round-padding-bottom: $button-round-padding-top !default;

/// @prop - Padding start of the round button
$button-round-padding-start: $button-round-padding-end !default;

/// @prop - Border radius of the round button
$button-round-border-radius: 64px !default;

// Button
// --------------------------------------------------

:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when pressed. Note: setting this will interfere with the Material Design ripple.
   * @prop --background-activated-opacity: Opacity of the button when pressed
   * @prop --background-focused: Background of the button when focused with the tab key
   * @prop --background-focused-opacity: Opacity of the button when focused with the tab key
   * @prop --background-hover: Background of the button on hover
   * @prop --background-hover-opacity: Opacity of the background on hover
   *
   * @prop --color: Text color of the button
   * @prop --color-activated: Text color of the button when pressed
   * @prop --color-focused: Text color of the button when focused with the tab key
   * @prop --color-hover: Text color of the button when hover
   *
   * @prop --transition: Transition of the button
   *
   * @prop --border-radius: Border radius of the button
   * @prop --border-width: Border width of the button
   * @prop --border-style: Border style of the button
   * @prop --border-color: Border color of the button
   *
   * @prop --ripple-color: Color of the button ripple effect
   *
   * @prop --box-shadow: Box shadow of the button
   * @prop --opacity: Opacity of the button
   *
   * @prop --padding-top: Top padding of the button
   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button
   * @prop --padding-bottom: Bottom padding of the button
   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button
   */
  --padding-top: 8px;
  --padding-start: 8px;
  --padding-bottom: 8px;
  --padding-end: 8px;
}

:host {
  --overflow: hidden;
  --ripple-color: currentColor;
  --border-width: initial;
  --border-color: initial;
  --border-style: initial;
  --color-activated: var(--color);
  --color-focused: var(--color);
  --color-hover: var(--color);
  --box-shadow: none;
  --border-radius: 3px;
  display: inline-block;

  width: auto;

  color: var(--color);

  font-family: $font-family-base;

  text-align: center;
  text-decoration: none;
  text-overflow: ellipsis;

  white-space: nowrap;

  user-select: none;
  vertical-align: top; // the better option for most scenarios
  vertical-align: -webkit-baseline-middle; // the best for those that support it
  pointer-events: auto;

  font-kerning: none;
}

[size="xl"] {
  min-width: 8rem;
  min-height: 4rem;
  --padding-top: 10px;
  --padding-start: 10px;
  --padding-bottom: 10px;
  --padding-end: 10px;
}

[size="lg"] {
  min-width: 7rem;
  min-height: 3rem;
}

[size="sm"] {
  min-width: 5rem;
  min-height: 2rem;
  --padding-top: 6px;
  --padding-start: 6px;
  --padding-bottom: 6px;
  --padding-end: 6px;
}

$BTNCOLORS: (primary,
  secondary,
  tertiary,
  success,
  warning,
  danger,
  light,
  medium,
  dark);

$VARIANTS: (outline, solid, clear);

@each $color-name in $BTNCOLORS {
  [color="#{$color-name}"] {
    --background: #{wl-color($color-name, base)};
    --color: #{wl-color($color-name, contrast)};
    --color-hover: #{wl-color($color-name, base, 0.5)};
    --background-hover: #{wl-color($color-name, contrast, 0.3)};
    --background-hover-opacity: 0.5;
  }

  @each $variant-name in $VARIANTS {
    [variant="#{$variant-name}"][color="#{$color-name}"] {
      --background: transparent;
      --color: #{wl-color($color-name, base)} !important;
      border-color: #{wl-color($color-name, base)} !important;
    }
  }

  [variant="outline"][color="#{$color-name}"] {
    --border-width: 20px !important;
    --background-hover: #{wl-color($color-name, base, 0.5)};
    outline: 1px solid #{wl-color($color-name, base)} !important;
    --border-radius: 0;
    --box-shadow: 0px 0px 0px 1px #{wl-color($color-name, base)} !important;
  }

  [color="#{$color-name}"] {
    --border-color: #{wl-color($color-name, base, 0.8)};
  }
}

[circular] {
  --border-radius: 50% !important;
  --box-shadow: none !important;
}

:host(.button-disabled) {
  cursor: default;
  opacity: 0.5;
  pointer-events: none;
}

// Solid Button
// --------------------------------------------------
// Solid Button with Color
:host(.button-native) {
  background: currentColor(base);
  // color: currentColor(contrast);
}

// Outline Button
// --------------------------------------------------
// Default Outline Color
[variant="outline"] {
  --border-width: 20px !important;
  outline: 1px solid currentColor(base) !important;
}

// Clear Button with Color
[variant="clear"] .button-native {
  background: transparent;
  color: currentColor(base);
}

// Default Clear Color
[variant="clear"] {
  --border-width: 0;
}

// Block Button
// --------------------------------------------------

[variant="block"] {
  display: block;
}

[variant="block"] .button-native {
  @include margin-horizontal(0);

  display: block;

  width: 100%;

  clear: both;

  contain: content;
}

[variant="block"] .button-native::after {
  clear: both;
}

// Full Button
// --------------------------------------------------

[variant="full"] {
  display: block;
}

:host([variant="full"]) {
  width: 100%;
  height: 100%;
  padding: 0;
  margin: 0;
  display: block;
  contain: content;
}

[variant="full"].button-native {
  @include margin-horizontal(0);

  display: block;

  width: 100%;

  contain: content;
}

.button-native {
  @include border-radius(var(--border-radius));
  @include font-smoothing();
  @include margin(0);
  @include padding(var(--padding-top),
    var(--padding-end),
    var(--padding-bottom),
    var(--padding-start));
  @include text-inherit();
  color: var(--color);

  display: block;
  position: relative;

  width: 100%;
  height: 100%;

  transition: var(--transition);

  border-width: var(--border-width);
  border-style: var(--border-style);
  border-color: var(--border-color);

  outline: none;

  background: var(--background);

  line-height: 1;

  box-shadow: var(--box-shadow);

  contain: layout style;
  cursor: pointer;

  opacity: var(--opacity);
  overflow: var(--overflow);

  z-index: 0;
  box-sizing: border-box;
  appearance: none;
}

.button-native::-moz-focus-inner {
  border: 0;
}

.button-inner {
  display: flex;
  position: relative;

  flex-flow: row nowrap;
  flex-shrink: 0;
  align-items: center;
  justify-content: center;

  width: 100%;
  height: 100%;

  z-index: 1;
}

.button-native::after {
  @include button-state();
}

// Button Activated
:host(.wl-activated) {
  color: var(--color-activated);
}

:host(.wl-activated) .button-native::after {
  background: var(--background-activated);

  opacity: var(--background-activated-opacity);
}

// Button Focused
:host(.wl-focused) {
  color: var(--color-focused);
}

:host(.wl-focused) .button-native::after {
  background: var(--background-focused);

  opacity: var(--background-focused-opacity);
}

// Button Hover
@media (any-hover: hover) {
  :host(:hover) {
    color: var(--color-hover);
  }

  :host(:hover) .button-native::after {
    background: var(--background-hover);

    opacity: var(--background-hover-opacity);
  }
}
